/** first part of Project1A
 * Deque implemented by Link List
 * @author JzzzX
 * */

public class LinkedListDeque<T> implements Deque<T> {

    // 定义节点类
    private class Node {
        private T item;
        private Node prev;
        private Node next;
    }

    // 定义 LinkedListDeque 类的成员变量,使用 sentinel 则不需要 head & tail
    private int size;
    private Node sentinel;

    public LinkedListDeque() {
        // 初始化 sentinel
        sentinel = new Node();
        sentinel.prev = sentinel;
        sentinel.next = sentinel;
        size = 0;
    }

    // 实现 addFirst 方法
    // @source This code was generated by ChatGPT. It reads and parses
    @Override
    public void addFirst(T item) {
        Node newNode = new Node();
        newNode.item = item;

        newNode.prev = sentinel;
        newNode.next = sentinel.next;
        sentinel.next.prev = newNode;
        sentinel.next = newNode;
        size++;
    }

    // 实现 addLast 方法
    @Override
    public void addLast(T item) {
        Node newNode = new Node();
        newNode.item = item;

        newNode.prev = sentinel.prev;
        newNode.next = sentinel;
        sentinel.prev.next = newNode;
        sentinel.prev = newNode;
        size++;
    }

    // 实现 isEmpty 方法
    @Override
    public boolean isEmpty() {
        return size == 0 || sentinel.next == sentinel;
    }

    //  实现 size 方法
    @Override
    public int size() {
        return size; // 实现 size 需要花费恒定的时间，所以其时间复杂度为 （O（1））
    }

    // 实现 printDeque 方法
    @Override
    public void printDeque() {
        Node current = sentinel.next;
        while (current != sentinel) {
            System.out.println(current.item + " ");
            current = current.next;
        }
        System.out.println(); // 打印换行符
    }

    // 实现 removeFirst 方法
    @Override
    public T removeFirst() {
        // 检查双端队列是否为空
        if (isEmpty()) {
            return null;
        }
        // 保存要移除的 firstNode 节点 item
        Node firstNode = sentinel.next;
        T item = firstNode.item;

        //调整 sentinel 以及第二个节点的指针
        sentinel.next = firstNode.next;
        firstNode.next.prev = sentinel;

        // 断开被移除节点的引用
        firstNode.next = null;
        firstNode.prev = null;

        size--;
        return item;
    }

    // 实现 removeLast 方法
    @Override
    public T removeLast() {
        if (isEmpty()) {
            return null;
        }
        Node lastNode = sentinel.prev;
        T item = lastNode.item;
        sentinel.prev = lastNode.prev;
        lastNode.prev.next = sentinel;
        lastNode.prev = null;
        lastNode.next = null;
        size--;
        return item;
    }

    // 实现 get(int index) 方法
    @Override
    public T get(int index) {
        // 检查索引合法性
        if (index < 0 || index >= size) {
            return null;
        }
        // 初始化遍历节点
        Node current = sentinel.next;
        // 遍历到目标索引
        for (int i = 0; i < index; i++) {
            current = current.next;
        }
        // 返回目标节点的 item
        return current.item;
    }

    // get 方法的递归版本
    // 创建一个私有的辅助方法，用于实际的递归操作。
    private T getRecursiveHelper(Node current, int index) {
        if (index == 0) {
            return current.item;
        }
        return getRecursiveHelper(current.next, index - 1);
    }
    public T getRecursive(int index) {
        if (index < 0 || index >= size) {
            return null;
        }
        return getRecursiveHelper(sentinel.next, index);
    }





}
